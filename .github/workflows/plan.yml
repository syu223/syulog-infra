on:
  push:
    branches:
      - "feature/**"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  inspect-token:
    runs-on: ubuntu-latest
    steps:
      - name: Request OIDC token
        id: request-oidc-token
        uses: actions/github-script@v6
        with:
          script: |
            const token = await core.getIDToken();
            core.setOutput("id_token", token);

      - name: Decode OIDC token `sub`
        run: |
          echo "üîê Decoding OIDC token..."
          echo "${{ steps.request-oidc-token.outputs.id_token }}" \
            | cut -d '.' -f2 \
            | base64 -d \
            | jq '.sub'

  terraform-plan:
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      statuses: write
      issues: write

    runs-on: ubuntu-latest

    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #TFC_ORG_NAME: syu-terraform
      #TFC_WORKSPACE_NAME: syulog

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Format Check (with diff)
        run: |
          set -e
          terraform fmt -check -recursive || true

          TMPDIR=$(mktemp -d)
          cp -r . "$TMPDIR"
          cd "$TMPDIR"
          terraform fmt -recursive

          diff_output=$(diff -u --exclude='.terraform' --exclude='.git' -r . "$GITHUB_WORKSPACE" || true)

          if [ -n "$diff_output" ]; then
            echo "Terraform format issues detected:"
            echo "$diff_output"
            exit 1
          fi

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: latest

      - name: TFLint
        run: |
          tflint --init
          tflint

      - name: Terraform Init
        run: terraform init -upgrade -no-color

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE }}
          aws-region: ap-northeast-1

      - name: Terraform Plan (output as binary)
        run: terraform plan -no-color -out=tfplan.binary

      - name: Create PR with Terraform plan result
        if: success()
        id: create_pr
        run: |
          plan_text=$(terraform show -no-color tfplan.binary)

          if echo "$plan_text" | grep -q '^- destroy'; then
            destroy_warning="‚ö†Ô∏è Destroy Êìç‰Ωú„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÂΩ±Èüø„Å´Ê≥®ÊÑè„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
          else
            destroy_warning=""
          fi

          body=$(cat <<EOF
‚úÖ Terraform plan „Å´Â§âÊõ¥„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅËá™Âãï„Åß PR „Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ
‰ª•‰∏ã„ÅÆÂ∑ÆÂàÜ„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ

$destroy_warning

\`\`\`
$plan_text
\`\`\`
EOF
          )

          gh pr create \
            --repo "$GITHUB_REPOSITORY" \
            --base main \
            --head "$GITHUB_REF_NAME" \
            --title "Terraform plan Â§âÊõ¥„Å´„Çà„ÇãËá™Âãï PR" \
            --body "$body"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

