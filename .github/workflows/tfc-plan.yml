- name: Terraform Cloud Run Plan
  id: run_plan
  run: |
    # 1. Workspace ID を先に取得
    workspace_id=$(curl -s -H "Authorization: Bearer $TF_TOKEN_app_terraform_io" \
      -H "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/organizations/$TFC_ORG_NAME/workspaces/$TFC_WORKSPACE_NAME \
      | jq -r '.data.id')

    echo "Workspace ID: $workspace_id"

    # 2. Run 作成リクエスト
    response=$(curl -sS -X POST \
      -H "Authorization: Bearer $TF_TOKEN_app_terraform_io" \
      -H "Content-Type: application/vnd.api+json" \
      -d "{\"data\":{\"attributes\":{\"is-destroy\":false,\"message\":\"GitHub Actionsを契機に実行\"},\"type\":\"runs\",\"relationships\":{\"workspace\":{\"data\":{\"type\":\"workspaces\",\"id\":\"$workspace_id\"}}}}}" \
      https://app.terraform.io/api/v2/runs)

    echo "Raw run creation response:"
    echo "$response" | jq

    run_id=$(echo "$response" | jq -r '.data.id')

    if [ "$run_id" == "null" ] || [ -z "$run_id" ]; then
      echo "Failed to create run."
      exit 1
    fi

    echo "Run ID: $run_id"
    echo "run_id=$run_id" >> $GITHUB_OUTPUT

    # 3. Run 状態のポーリング
    while true; do
      run_status=$(curl -s -H "Authorization: Bearer $TF_TOKEN_app_terraform_io" \
        -H "Content-Type: application/vnd.api+json" \
        https://app.terraform.io/api/v2/runs/$run_id | jq -r '.data.attributes.status')

      echo "Run status: $run_status"

      if [[ "$run_status" == "planned" || "$run_status" == "planned_and_finished" ]]; then
        break
      elif [[ "$run_status" == "errored" || "$run_status" == "canceled" ]]; then
        echo "Run failed with status: $run_status"
        exit 1
      fi
      sleep 10
    done

    plan_url="https://app.terraform.io/app/$TFC_ORG_NAME/workspaces/$TFC_WORKSPACE_NAME/runs/$run_id"
    echo "Plan URL: $plan_url"
    echo "plan_url=$plan_url" >> $GITHUB_OUTPUT

